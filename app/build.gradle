plugins {
  id "com.android.application"
}

android {
    compileSdkVersion project.properties.compileSdkVersion.toInteger()
    ndkVersion project.properties.ndkVersion

    dependencies {
        implementation "androidx.annotation:annotation:1.1.0"
        implementation "androidx.viewpager:viewpager:1.0.0"
        implementation "androidx.drawerlayout:drawerlayout:1.1.0"
        implementation project(":terminal-view")
    }

    defaultConfig {
        applicationId "com.termux"
        minSdkVersion project.properties.minSdkVersion.toInteger()
        targetSdkVersion project.properties.targetSdkVersion.toInteger()
        versionCode 98
        versionName "0.98"
    }

    signingConfigs {
        debug {
            storeFile file('dev_keystore.jks')
            keyAlias 'alias'
            storePassword 'xrj45yWGLbsO7W0v'
            keyPassword 'xrj45yWGLbsO7W0v'
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.debug
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.robolectric:robolectric:4.3.1'
}

task versionName {
  doLast {
    print android.defaultConfig.versionName
  }
}

def setupBootstrap(String arch, String expectedChecksum, int version) {
    def digest = java.security.MessageDigest.getInstance("SHA-256")

    def zipDownloadFile = new File(project.buildDir, "./gradle/bootstrap-" + arch + ".zip")

    if (zipDownloadFile.exists()) {
        def buffer = new byte[8192]
        def input = new FileInputStream(zipDownloadFile)
        while (true) {
            def readBytes = input.read(buffer)
            if (readBytes < 0) break
            digest.update(buffer, 0, readBytes)
        }
        def checksum = new BigInteger(1, digest.digest()).toString(16)
        if (checksum != expectedChecksum) {
            logger.quiet("Deleting old local file with wrong hash: " + zipDownloadFile.getAbsolutePath())
            zipDownloadFile.delete()
        }
    }

    if (!zipDownloadFile.exists()) {
        def remoteUrl = "https://bintray.com/termux/bootstrap/download_file?file_path=bootstrap-" + arch + "-v" + version + ".zip"
        logger.quiet("Downloading " + remoteUrl + " ...")

        zipDownloadFile.parentFile.mkdirs()
        def out = new BufferedOutputStream(new FileOutputStream(zipDownloadFile))

        def connection = new URL(remoteUrl).openConnection()
        connection.setInstanceFollowRedirects(true)
        def digestStream = new java.security.DigestInputStream(connection.inputStream, digest)
        out << digestStream
        out.close()

        def checksum = new BigInteger(1, digest.digest()).toString(16)
        if (checksum != expectedChecksum) {
            zipDownloadFile.delete()
            throw new GradleException("Wrong checksum for " + remoteUrl + ": expected: " + expectedChecksum + ", actual: " + checksum)
        }
    }

    def doneMarkerFile = new File(zipDownloadFile.getAbsolutePath() + ".done")

    if (doneMarkerFile.exists()) return

    def archDirName
    if (arch == "aarch64") archDirName = "arm64-v8a";
    if (arch == "arm") archDirName = "armeabi-v7a";
    if (arch == "i686") archDirName = "x86";
    if (arch == "x86_64") archDirName = "x86_64";

    def outputPath = project.getRootDir().getAbsolutePath() + "/app/src/main/jniLibs/" + archDirName + "/"
    def outputDir = new File(outputPath).getAbsoluteFile()
    if (!outputDir.exists()) outputDir.mkdirs()

    def symlinksFile = new File(outputDir, "symlinks.so").getAbsoluteFile()
    if (symlinksFile.exists()) symlinksFile.delete();

    def mappingsFile = new File(outputDir, "files.so").getAbsoluteFile()
    if (mappingsFile.exists()) mappingsFile.delete()
    mappingsFile.createNewFile()
    def mappingsFileWriter = new BufferedWriter(new FileWriter(mappingsFile))

    def counter = 100
    new java.util.zip.ZipInputStream(new FileInputStream(zipDownloadFile)).withCloseable { zipInput ->
        java.util.zip.ZipEntry zipEntry
        while ((zipEntry = zipInput.getNextEntry()) != null) {
            if (zipEntry.getName() == "SYMLINKS.txt") {
                zipInput.transferTo(new FileOutputStream(symlinksFile))
            } else if (!zipEntry.isDirectory()) {
                def soName = counter + ".so"
                def targetFile = new File(outputDir, soName).getAbsoluteFile()

                zipInput.transferTo(new FileOutputStream(targetFile))
                mappingsFileWriter.writeLine(soName + "←" + zipEntry.getName())
                counter++
            }
        }
    }

    doneMarkerFile.createNewFile()
}

task setupBootstraps(){
    doLast {
        def version = 20
        setupBootstrap("aarch64", "2ea6aaff12d8316223e5c1f22719d20633fae669d6461a6802b67b4adbe796de", version)
        setupBootstrap("arm",     "8a3a7e8adeff8eb769b03cad947f81b8c42b7c4c8edeea37c71a9d7abd9de99c", version)
        setupBootstrap("i686",    "b3e1f8e3ccb695d6fab7714c62b2028fbc37187ccfaff0a9f6bd64f738bc5adc", version)
        setupBootstrap("x86_64",  "2a9f6adbfb6f5e7c0bd03e022856a140768fa25ada850384d635c25c8e966ea3", version)
    }
}

afterEvaluate {
  android.applicationVariants.all { variant ->
    variant.javaCompileProvider.get().dependsOn(setupBootstraps)
  }
}
